<!-- <!DOCTYPE project SYSTEM "build.dtd"> -->
<project name="interactive-graph-ui" default="compile" basedir="./interactive-graph-ui">

    <!-- Include variables and constants -->
    <property file="../build.properties" />

    <!-- Define the classpath for the project -->
    <path id="project.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

   <!-- <taskdef resource="net/sf/antcontrib/antlib.xml" /> -->

    <!-- Clean the build directory -->
    <target name="clean">
        <delete dir="${build.dir}" />
    </target>
    
    <!-- Create the build directory structure -->
    <target name="init">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${classes.dir}" />
    </target>

    <!-- [default] Compile project -->
    <target name="compile" depends="init">
        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false" classpath="project.classpath">
            <classpath refid="project.classpath" />
            <compilerarg line="-Xlint:unchecked" />
        </javac>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}">
                <include name="**/*" />
            </fileset>
        </copy>
    </target>

    <!-- Build the project and package it into a WAR file -->
    <target name="build" depends="compile">
        <copy todir="${build.dir}/webapp">
            <fileset dir="${webapp.dir}">
                <include name="**/*" />
            </fileset>
        </copy>
        <copy todir="${build.dir}/webapp/WEB-INF/classes">
            <fileset dir="${classes.dir}">
                <include name="**/*" />
            </fileset>
        </copy>
        <copy todir="${build.dir}/webapp/WEB-INF/lib">
            <fileset dir="${lib.dir}">
                <include name="*.jar" />
            </fileset>
        </copy>
        <war destfile="${build.dir}/${war.name}" webxml="${webapp.dir}/WEB-INF/web.xml">
            <manifest>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Version" value="1.0-SNAPSHOT"/>
            </manifest>
            <fileset dir="${build.dir}/webapp">
                <include name="**/*" />
                <exclude name="**/WEB-INF/web.xml" />
            </fileset>
        </war>
    </target>

    <!-- Validate XML files -->
    <target name="xml">
        <xmlvalidate lenient="true">
            <fileset dir="${basedir}">
                <include name="**/*.xml" />
            </fileset>
        </xmlvalidate>
    </target>

    <!-- Classpath for JUnit tests -->
    <path id="test.classpath">
        <path refid="project.classpath" />
        <pathelement location="${build.dir}/webapp/WEB-INF/classes" />
        <pathelement location="${build.dir}/test-classes" />
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <!-- Test isInArea function using Junit -->
    <target name="test" depends="build">
        <mkdir dir="${build.dir}/test-classes"/>
        <javac srcdir="${test.dir}" destdir="${build.dir}/test-classes" includeantruntime="false" classpathref="test.classpath">
            <compilerarg line="-Xlint:unchecked"/>
        </javac>

        <mkdir dir="${build.dir}/test-results"/>
        <junitlauncher haltonfailure="true" printsummary="true">
            <classpath>
                <path refid="test.classpath"/>
                <pathelement location="${build.dir}/test-classes"/>
            </classpath>
            <testclasses outputdir="${build.dir}/test-results">
                <fileset dir="${build.dir}/test-classes" includes="**/*Test.class"/>
            </testclasses>
        </junitlauncher>
    </target>

    <!-- Convert native2ascii for localization files -->
    <target name="native2ascii">
        <native2ascii encoding="UTF-8" dest="${build.dir}/webapp/WEB-INF/classes" src="${resources.dir}">
            <include name="**/*.properties" />
        </native2ascii>
    </target>

    <!-- Deploy war to helios -->
    <target name="scp" depends="build">
        <scp todir="${scp.host}" port="${scp.port}" password="${scp.password}" trust="true" >
            <fileset dir="${build.dir}">
                <include name="**/*.war" />
            </fileset>
        </scp>
    </target>

    <!-- Alternative version of the project -->
    <target name="alt" depends="build">
        <unwar src="${build.dir}/${war.name}" dest="${build.dir}/alt-webapp">
            <patternset>
                <include name="**/*" />
            </patternset>
        </unwar>

        <replace dir="${build.dir}/alt-webapp">
            <include name="**/*.java" />
            <replacefilter token="variableName" value="alternativeVariableName" />
            <replacefilter token="ClassName" value="AlternativeClassName" />
        </replace>

        <war destfile="${build.dir}/${war.name}-alt.war" webxml="${build.dir}/alt-webapp/WEB-INF/web.xml">
            <manifest>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Version" value="1.0-SNAPSHOT-ALT"/>
            </manifest>
            <fileset dir="${build.dir}/alt-webapp">
                <include name="**/*" />
                <exclude name="**/WEB-INF/web.xml" />
            </fileset>
        </war>
    </target>

    <!-- Alteernative environment -->
    <target name="env">
        <fail unless="java.home" message="java.home is not set in env.properties" />
        <fail unless="javac.args" message="javac.args is not set in env.properties" />
        <fail unless="vm.args" message="vm.args is not set in env.properties" />

        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false" fork="true" executable="${java.home}/bin/javac">
            <classpath refid="project.classpath" />
            <compilerarg line="${javac.args}" />
        </javac>

        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}">
                <include name="**/*" />
            </fileset>
        </copy>

        <java fork="true" classname="com.example.Main">
            <jvmarg line="-Djava.home=${java.home} ${vm.args}" />
            <classpath>
                <path refid="project.classpath" />
                <pathelement location="${classes.dir}" />
            </classpath>
        </java>
    </target>

    <!-- Find the last working revision if compilation fails -->
    <target name="history">
        <exec executable="git" outputproperty="current.revision" failonerror="false">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>

        <property name="previous.revision" value="HEAD"/>
        <property name="found.working.revision" value="false"/>

        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <pathelement location="${lib.dir}/ant-contrib.jar"/>
            </classpath>
        </taskdef>

        <foreach list="${previous.revision}" param="revision" target="find-working-revision">
            <param name="revision" value="${previous.revision}"/>
        </foreach>
    </target>

    <target name="find-working-revision">
        <exec executable="git" failonerror="false">
            <arg value="checkout"/>
            <arg value="${revision}"/>
        </exec>

        <trycatch>
            <try>
                <antcall target="compile"/>
                <echo>Found working revision: ${revision}</echo>
                <exec executable="git" output="${build.dir}/diff.txt" failonerror="false">
                    <arg value="diff"/>
                    <arg value="${revision}~1"/>
                    <arg value="${current.revision}"/>
                </exec>
                <exec executable="git" failonerror="false">
                    <arg value="checkout"/>
                    <arg value="${current.revision}"/>
                </exec>
                <fail message="Compilation fixed. Please check diff.txt for changes."/>
            </try>
            <catch>
                <echo>Compilation failed on revision: ${revision}. Checking previous revision...</echo>
            </catch>
        </trycatch>
    </target>


    <!-- Generate MD5 & SHA-1 hash -->
    <target name="generate-checksums">
        <delete file="${checksums.md5.file}" quiet="true"/>
        <delete file="${checksums.sha1.file}" quiet="true"/>

        <checksum algorithm="MD5" fileext=".md5">
            <fileset dir="${build.dir}/webapp"/>
        </checksum>
        <checksum algorithm="SHA1" fileext=".sha1">
            <fileset dir="${build.dir}/webapp"/>
        </checksum>

        <concat destfile="${checksums.md5.file}">
            <fileset dir="${build.dir}/webapp" includes="**/*.md5"/>
        </concat>
        <concat destfile="${checksums.sha1.file}">
            <fileset dir="${build.dir}/webapp" includes="**/*.sha1"/>
        </concat>

        <delete>
            <fileset dir="${build.dir}/webapp" includes="**/*.md5"/>
            <fileset dir="${build.dir}/webapp" includes="**/*.sha1"/>
        </delete>
    </target>

    <!-- Generate docs -->
    <target name="doc" depends="build, generate-checksums">
        <mkdir dir="${build.dir}/javadoc"/>
        <javadoc sourcepath="${src.dir}" destdir="${build.dir}/javadoc" packagenames="*">
            <classpath refid="project.classpath" />
        </javadoc>

        <loadfile property="md5" srcFile="${checksums.md5.file}"/>
        <loadfile property="sha1" srcFile="${checksums.sha1.file}"/>

        <manifest file="${build.dir}/webapp/META-INF/MANIFEST.MF" mode="update">
            <attribute name="MD5-Digest" value="${md5}"/>
            <attribute name="SHA1-Digest" value="${sha1}"/>
        </manifest>

        <war destfile="${build.dir}/${war.name}" update="true">
            <fileset dir="${build.dir}/javadoc"/>
        </war>
    </target>

    <!-- Play music on build -->
    <target name="music" depends="build">
        <exec executable="ffplay" failonerror="false">
            <arg value="-nodisp"/>
            <arg value="-autoexit"/>
            <arg value="-ss"/>
            <arg value="58"/>
            <arg value="${lib.dir}/song.mp3"/>
        </exec>
    </target>

    <!-- Junit reports -->
    <target name="report" depends="test">
        <mkdir dir="${build.dir}/test-reports"/>

        <junitreport todir="${build.dir}/test-reports">
            <fileset dir="${build.dir}/test-results">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.dir}/test-reports/html"/>
        </junitreport>

        <exec executable="git" failonerror="false">
            <arg value="add"/>
            <arg value="${build.dir}/test-reports"/>
        </exec>

        <exec executable="git" failonerror="false">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="Automated commit of JUnit test report"/>
        </exec>
    </target>

    <!-- Check special classes -->
    <target name="diff">
        <exec executable="git" outputproperty="git.status" failonerror="true">
            <arg value="status"/>
            <arg value="--porcelain"/>
        </exec>

        <loadfile property="classes.to.check" srcFile="${lib.dir}/classes.txt">
            <filterchain>
                <tokenfilter delimoutput=","/>
            </filterchain>
        </loadfile>

        <condition property="changes.detected">
            <and>
                <contains string="${git.status}" substring="M"/>
                <contains string="${git.status}" substring="${classes.to.check}"/>
            </and>
        </condition>

        <antcall target="commit">
            <param name="message" value="Automated commit triggered by changes in specified classes"/>
        </antcall>
    </target>

    <target name="commit" if="changes.detected">
        <exec executable="git" failonerror="true">
            <arg value="add"/>
            <arg value="."/>
        </exec>

        <exec executable="git" failonerror="true">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="${message}"/>
        </exec>
    </target>

    <!-- Build 3 prev revisions -->
    <target name="team">
        <exec executable="git" outputproperty="current.revision" failonerror="false">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>

        <property name="revision1" value="${current.revision}~1"/>
        <property name="revision2" value="${current.revision}~2"/>
        <property name="revision3" value="${current.revision}~3"/>

        <echo>Building revision: ${revision1}</echo>
        <exec executable="git" failonerror="false">
            <arg value="checkout"/>
            <arg value="${revision1}"/>
        </exec>
        <antcall target="build">
            <param name="war.name" value="${war.name}-${revision1}.war"/>
        </antcall>

        <echo>Building revision: ${revision2}</echo>
        <exec executable="git" failonerror="false">
            <arg value="checkout"/>
            <arg value="${revision2}"/>
        </exec>
        <antcall target="build">
            <param name="war.name" value="${war.name}-${revision2}.war"/>
        </antcall>

        <echo>Building revision: ${revision3}</echo>
        <exec executable="git" failonerror="false">
            <arg value="checkout"/>
            <arg value="${revision3}"/>
        </exec>
        <antcall target="build">
            <param name="war.name" value="${war.name}-${revision3}.war"/>
        </antcall>

        <zip destfile="${build.dir}/team-revisions.zip">
            <fileset dir="${build.dir}">
                <include name="${war.name}-${revision1}.war"/>
                <include name="${war.name}-${revision2}.war"/>
                <include name="${war.name}-${revision3}.war"/>
            </fileset>
        </zip>
    </target>

</project>
